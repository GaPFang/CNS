from lib import Packet

sk = [
    [224032687175252478235208215462307324107, 88977933296987148560245615096017687065],
    [171357530390416476788076248885456540363, 153371225683828214503227440567932627553],
    [210474892323526595830131402586832526941, 78686014569155211921853092210809290529],
    [197372476355363434029333008986618938871, 65815922277036063394018161673201832337],
    [190001741347270185112445713633817002589, 137706832968460358596468775312083721333],
    [162621040375309611937458490588771623781, 9657462031229763485624931627302953073],
    [305161092661948457846435168660138994649, 158161143086323805888014399936957950193],
    [309785472754911018058822477472533615759, 302198831868516581538452462982521610113],
    [145701287843323127043594637270782000529, 127611180282996589573935428061678825473],
    [123663796685528289069519109073401678973, 100624369224242291682861842403044879201],
    [204803030395916751922116613422086928493, 162868674766534770819263996450782765673]
]
start = 8
c = "5cb18c18a2097bc6bcec352220b373b7079f3fad4d511668c58b4c3fbc07736f1378257b51d0fef76a4a5317c8bfacfe7732d560f6f656cb4a09ff26f1ae91705e0ec5e8cbf90567136dea58d6bd0467322d875e79f07b933ca2edcbc5c7f23d57559438e3a6dfa0e96aa5307600dc8bcdaef7c1f69c173efa39fa1c04366f1bd970948862cd4b1c52cb7968f0be490b6b1fdd67fad6470029f64f516e26f0108ecb43286425ab27dec9d97b906d8973356e7744a9e9a94e0e14cf72974710933bc49eef0def2b92021651b5d3b363342d89d4c6520f7be76c00feaa32b806e5b2badb20997eaf1e87b5e4375a2d6156d71902b331b677c5e8a428479f67474b9502c760f9a4727024156cf78ef21dccb7772162108eeb75914da49c9a09c5703ef31a2adabdce72215ca298758aa706c274793bc4b5e9b9e505246ef0853f180863e41b74cbb3b0aa02a442698155e45c4ccb3b74c3d306853e47714a24604cb48e4d980c289d0d848d87a371c17a2b09d7844eeabc3ca016eaf28e9b5cfd29d85126efd245ef6b066c808d628dd146"

def byteStr_to_byte(s):
    return bytes([int(s[i:i+2], 16) for i in range(0, len(s), 2)])

def main():
    p = Packet(byteStr_to_byte(c))
    next_hop = start
    while True:
        next_hop, next_packet = p.decrypt_server(sk[next_hop])
        print(next_hop)
        p = next_packet
        if next_hop == 10:
            print(p.decrypt_client(sk[10]))
            break

if __name__ == "__main__":
    main()
